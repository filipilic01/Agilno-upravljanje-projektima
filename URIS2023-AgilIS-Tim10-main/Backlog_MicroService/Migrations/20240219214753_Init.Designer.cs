// <auto-generated />
using System;
using Backlog_MicroService.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backlog_MicroService.Migrations
{
    [DbContext(typeof(BacklogDBContext))]
    [Migration("20240219214753_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backlog_MicroService.Entities.Backlog", b =>
                {
                    b.Property<Guid>("IdBacklog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("KorisnikId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjekatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdBacklog");

                    b.ToTable("Backlogs");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Backlog");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Backlog_MicroService.Entities.ProductBacklog", b =>
                {
                    b.HasBaseType("Backlog_MicroService.Entities.Backlog");

                    b.Property<string>("AngazovaniRadnici")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisZadatak")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VremeTrajanja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ProductBacklog");

                    b.HasData(
                        new
                        {
                            IdBacklog = new Guid("7c55d20c-a4cf-4c47-b44b-af8b58101b42"),
                            KorisnikId = new Guid("7aae8c74-674b-4049-8c7f-9e4f0e5c6109"),
                            Naslov = "Naslov ProductBackloga",
                            Opis = "Opis ProductBackloga",
                            ProjekatId = new Guid("7c259ee3-13b2-4d3b-abeb-c4e6343eace1"),
                            AngazovaniRadnici = "Angažovani radnici ProductBackloga",
                            OpisZadatak = "Opis zadatka ProductBackloga",
                            VremeTrajanja = "Vreme trajanja ProductBackloga"
                        });
                });

            modelBuilder.Entity("Backlog_MicroService.Entities.SprintBacklog", b =>
                {
                    b.HasBaseType("Backlog_MicroService.Entities.Backlog");

                    b.Property<string>("Cilj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Kraj")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Pocetak")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("SprintBacklog");

                    b.HasData(
                        new
                        {
                            IdBacklog = new Guid("4e4bbba9-9dbe-4f8d-847a-310e08d26de5"),
                            KorisnikId = new Guid("1c989ee3-13b2-4d3b-abeb-c4e6343eace1"),
                            Naslov = "Novi micro servis",
                            Opis = "Napraviti micro servis za baclog",
                            ProjekatId = new Guid("7c259ee3-13b2-4d3b-abeb-c4e6343eace1"),
                            Cilj = "Cilj SprintBackloga",
                            Kraj = new DateTime(2024, 2, 26, 22, 47, 53, 54, DateTimeKind.Local).AddTicks(5437),
                            Pocetak = new DateTime(2024, 2, 19, 22, 47, 53, 54, DateTimeKind.Local).AddTicks(5390)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
